.include "io.inc65"
.include "macros.inc65"
.include "zeropage.inc65"


;
; File generated by cc65 v 2.19 - Git a861d84
;
	.fopt		compiler,"cc65 v 2.19 - Git a861d84"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.macpack	longbranch

	.export	_duart_init
	.export _duart_putc
	.export _duart_getc
	.export _duart_puts
	.export _duart_put_newline
	.export DUARTIRQ

.segment "DATA"

INBUF: .res 1

.segment "CODE"

_duart_init:  LDA #$B0          ; Reset MRA Pointer to $00
            STA DUARTCRA
            LDA #$C9          ; Enable RX Watchdog, RX Interrupt level 16 bytes, 16 byte FIFO, Baud Extended mode I
            STA DUARTMRA
            LDA #$D3          ; Enable RX controlled RTS, RX Interrupt level 16 bytes, No parity, 8 Bits per character
            STA DUARTMRA
            LDA #$01
            STA DUARTSOPR
            LDA #$07          ; Enable TX CTS Control, 1 Stop Bit
            STA DUARTMRA
            LDA #$60          ; Set timer mode external clock x1
            STA DUARTACR
            LDA #$CC          ; Set TX/RX Baud to 230,400 (115200 with 1.8432Mhz Oscillator)
            STA DUARTCSRA
            LDA #$0A          ; Enable Timer/RxRDYA Interrupts
            STA DUARTIMR
            LDA #$24          ; 100hz interval for Timer
            STA DUARTCTPU
            STZ DUARTCTL
            LDA DUARTSOPR     ; Start timer
            LDA #$05
            STA DUARTCRA      ; Enable TX/RX on Channel A
            LDA #$0A
            STA DUARTCRB      ; Disable TX/RX on Channel B

_duart_getc: 	LDA INBUF
							RTS


_duart_putc:PHA
            LDA DUARTSRA
            AND #$04
            BEQ _duart_putc+1
            PLA
            STA DUARTTXA
            rts


_duart_put_newline:  	PHA
LDA #$0D
JSR _duart_putc
LDA #$0A
JSR _duart_putc
PLA
RTS

DUARTIRQ:   LDA DUARTISR
            AND #$08        ; Timer interrupt?
            BEQ DUARTRCV    ; Nope, receive a character

@TICKEND:   LDA DUARTROPR ; "reset counter" command

DUARTRCV:   LDA DUARTSRA
            AND #$01
            BEQ DUARTEND
            JSR CTSCONTROL
            BCS DUARTEND
            LDA DUARTRXA
            JSR STORCHAR
            BRA DUARTRCV ; Loop around and get everything from the FIFO
DUARTEND:   RTI

CTSCONTROL: PHA
@ENABLE:    LDA #$0A
            STA DUARTIMR ; Enable RX Full interrupt
@END:       PLA
            RTS

STORCHAR:   STA INBUF
            JSR CTSCONTROL
            RTS

_duart_puts:phay
          	sta ptr1
          	stx ptr1 + 1
          	ldy #0
@next_char: lda (ptr1),y
          	beq @eos
          	jsr _duart_putc
          	iny
          	bne @next_char
@eos:       play
          	rts
